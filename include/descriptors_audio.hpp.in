#ifndef __LIBARCSDEC_DESCRIPTORS_AUDIO_HPP__
#define __LIBARCSDEC_DESCRIPTORS_AUDIO_HPP__

/**
 * \file
 *
 * \brief Provide compiled-in
 * @link AudioReaderDescriptor AudioReaderDescriptors @endlink.
 *
 * This information is controlled by cmake. It is made accessible at build time
 * for program scope.
 */

#include <memory>
#include <vector>

#ifndef __LIBARCSDEC_READERWAV_HPP__
#include "readerwav.hpp"
#endif


// Configure available features


// FLAC

#cmakedefine WITH_FLAC     // will be defined iff compiled with FLAC support

#ifdef WITH_FLAC
	#ifndef __LIBARCSDEC_READERFLAC_HPP__
	#include "readerflac.hpp"
	#endif
#endif


// WAVPACK

#cmakedefine WITH_WAVPACK

#ifdef WITH_WAVPACK
	#ifndef __LIBARCSDEC_READERWVPK_HPP__
	#include "readerwvpk.hpp"
	#endif
#endif


// FFMPEG Generic Reader

#cmakedefine WITH_FFMPEG

#ifdef WITH_FFMPEG
	#ifndef __LIBARCSDEC_READERFFMPEG_HPP__
	#include "readerffmpeg.hpp"
	#endif
#endif


namespace arcsdec
{

inline namespace v_1_0_0
{

/**
 * \brief List of supported audio file formats.
 *
 * The actual list entries are controlled by CMake at buildtime.
 *
 * \internal
 * \ingroup filereader
 */
class FileReaderDescriptorsAudio final
{
	using container_type = std::vector<std::unique_ptr<FileReaderDescriptor>>;


public:

	using iterator = container_type::iterator;

	using const_iterator = container_type::const_iterator;

	/**
	 * \brief Default constructor.
	 *
	 * Adds all available FileReaderDescriptor instances to the instance.
	 */
	FileReaderDescriptorsAudio()
		: formats_()
	{
		formats_.reserve(5);

		formats_.push_back(std::make_unique<DescriptorWavPCM>());

#ifdef WITH_FLAC
		formats_.push_back(std::make_unique<DescriptorFlac>());
#endif

#ifdef WITH_WAVPACK
		formats_.push_back(std::make_unique<DescriptorWavpack>());
#endif

#ifdef WITH_FFMPEG
		formats_.push_back(std::make_unique<DescriptorFFmpeg>());
#endif
	}

	/**
	 * \brief Iterator pointing to the first format.
	 */
	iterator begin()
	{
		return formats_.begin();
	}

	/**
	 * \brief Iterator pointing behind the last format.
	 */
	iterator end()
	{
		return formats_.end();
	}

	/**
	 * \brief Iterator pointing to the first format.
	 */
	const_iterator begin() const
	{
		return formats_.begin();
	}

	/**
	 * \brief Iterator pointing behind the last format.
	 */
	const_iterator end() const
	{
		return formats_.end();
	}

	/**
	 * \brief Iterator pointing to the first format.
	 */
	const_iterator cbegin() const
	{
		return formats_.cbegin();
	}

	/**
	 * \brief Iterator pointing behind the last format.
	 */
	const_iterator cend() const
	{
		return formats_.cend();
	}


private:

	/**
	 * \brief List of available file formats.
	 */
	container_type formats_;
};

} // namespace v_1_0_0

} // namespace arcsdec


// Restrict scope of cmake-controlled variables to this file

#ifdef WITH_FLAC
	#undef WITH_FLAC
#endif

#ifdef WITH_WAVPACK
	#undef WITH_WAVPACK
#endif

#ifdef WITH_FFMPEG
	#undef WITH_FFMPEG
#endif

#endif

